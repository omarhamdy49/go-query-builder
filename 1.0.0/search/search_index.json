{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Go Query Builder \u2014 Full Developer Guide","text":"<p>A Laravel-inspired query builder for Go with MySQL &amp; PostgreSQL support. Chainable API, pagination, and safety.</p> <p>This documentation is structured similarly to Laravel's Query Builder docs to help you navigate quickly.</p> <ul> <li>Source code: GitHub</li> <li>License: MIT</li> </ul> <p>Quick start</p> <ul> <li><code>go get github.com/omarhamdy49/go-query-builder</code></li> <li><code>export DB_*</code> env vars</li> <li>Start coding with <code>querybuilder.QB().Table(\"users\").Get(ctx)</code></li> </ul>"},{"location":"aggregates-grouping/","title":"Aggregates &amp; Grouping","text":""},{"location":"aggregates-grouping/#aggregates","title":"Aggregates","text":"<pre><code>total, _  := querybuilder.QB().Table(\"users\").Count(ctx)\navgAge, _ := querybuilder.QB().Table(\"users\").Avg(ctx, \"age\")\nmaxAge, _ := querybuilder.QB().Table(\"users\").Max(ctx, \"age\")\nminAge, _ := querybuilder.QB().Table(\"users\").Min(ctx, \"age\")\npayroll,_ := querybuilder.QB().Table(\"employees\").Sum(ctx, \"salary\")\n</code></pre>"},{"location":"aggregates-grouping/#grouping-having","title":"Grouping &amp; Having","text":"<pre><code>stats, _ := querybuilder.\n  QB().\n  Table(\"users\").\n  Select(\"role\", \"COUNT(*) AS count\", \"AVG(age) AS avg_age\").\n  GroupBy(\"role\").\n  Having(\"COUNT(*)\", \"&gt;\", 5).\n  OrderBy(\"count\", \"desc\").\n  Get(ctx)\n</code></pre>"},{"location":"api-cheatsheet/","title":"API Cheatsheet","text":""},{"location":"api-cheatsheet/#entrypoints","title":"Entrypoints","text":"<pre><code>QB()\nQB().Table(\"users\")\nQB().Table(User{})\nTableBuilder(\"users\")\nConnection(\"analytics\").Table(\"events\")\n</code></pre>"},{"location":"api-cheatsheet/#select-retrieve","title":"Select / Retrieve","text":"<pre><code>Select(\"col\", \"col2\")\nGet(ctx)\nFirst(ctx)\nFind(ctx, id)\nOrderBy(\"col\", \"desc\")\nLimit(10)\nOffset(20)\n</code></pre>"},{"location":"api-cheatsheet/#filter","title":"Filter","text":"<pre><code>Where(\"col\", \"value\")\nWhere(\"col\", \"&gt;\", 10)\nOrWhere(\"col\", \"value\")\nWhereIn(\"col\", []any{...})\nWhereNotNull(\"col\")\nWhere(\"age\", \"between\", []any{18, 65})\nWhere(\"metadata-&gt;theme\", \"dark\")\nWhereJsonContains(\"prefs\", `{\"notifications\": true}`)\nWhereFullText([]string{\"title\",\"body\"}, \"query\")\n</code></pre>"},{"location":"api-cheatsheet/#join","title":"Join","text":"<pre><code>Join(\"posts\", \"users.id\", \"posts.author_id\")\nLeftJoin(\"categories\", \"posts.category_id\", \"categories.id\")\n</code></pre>"},{"location":"api-cheatsheet/#aggregation-grouping","title":"Aggregation / Grouping","text":"<pre><code>Count(ctx)\nAvg(ctx, \"col\")\nMax(ctx, \"col\")\nMin(ctx, \"col\")\nSum(ctx, \"col\")\nGroupBy(\"role\").Having(\"COUNT(*)\", \"&gt;\", 5)\n</code></pre>"},{"location":"api-cheatsheet/#writing","title":"Writing","text":"<pre><code>Insert(ctx, map[string]any{...})\nInsertBatch(ctx, []map[string]any{...})\nUpdate(ctx, map[string]any{...})\nDelete(ctx)\n</code></pre>"},{"location":"api-cheatsheet/#pagination","title":"Pagination","text":"<pre><code>p, _ := QB().Table(\"users\").OrderBy(\"id\").Paginate(ctx, 2, 20)\np.Data.Each(func(row map[string]any) bool { return true })\np.Meta\np.OnFirstPage()\np.HasMorePages()\np.GetNextPageNumber()\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v01-initial-docs","title":"v0.1 (initial docs)","text":"<ul> <li>First cut of the Laravel-style developer guide</li> <li>Versioned docs using <code>mike</code></li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<ol> <li>Fork the repo and create a feature branch.</li> <li>Write tests (<code>go test ./...</code>).</li> <li>Ensure docs examples compile where applicable.</li> <li>Open a PR with a clear description and reference to issues.</li> </ol>"},{"location":"contributing/#docs","title":"Docs","text":"<ul> <li>Local preview: <code>pip install -r requirements.txt &amp;&amp; mkdocs serve</code></li> <li>Versioned deploy: <code>./scripts/release.sh v0.1 latest</code></li> </ul>"},{"location":"core-concepts/","title":"Core Concepts","text":""},{"location":"core-concepts/#global-entrypoint-qb","title":"Global Entrypoint (<code>QB</code>)","text":"<p><code>QB()</code> returns the singleton query entrypoint \u2014 think of it like Laravel\u2019s <code>DB</code> facade.</p> <pre><code>q := querybuilder.QB()\n</code></pre>"},{"location":"core-concepts/#selecting-a-table-table","title":"Selecting a Table (<code>Table</code>)","text":"<pre><code>query := querybuilder.QB().Table(\"users\")\n</code></pre>"},{"location":"core-concepts/#using-models-tableuser","title":"Using Models (<code>Table(User{})</code>)","text":"<pre><code>type User struct {\n  ID    int    `db:\"id\"`\n  Name  string `db:\"name\"`\n  Email string `db:\"email\"`\n}\n\nfunc (User) TableName() string { return \"users\" }\n\nadults, err := querybuilder.\n  QB().\n  Table(User{}).\n  Where(\"age\", \"&gt;=\", 18).\n  Get(ctx)\n\none, err := querybuilder.\n  QB().\n  Table(&amp;User{}).\n  Find(ctx, 1)\n</code></pre>"},{"location":"core-concepts/#convenience-builder-tablebuilder","title":"Convenience Builder (<code>TableBuilder</code>)","text":"<pre><code>rows, err := querybuilder.\n  TableBuilder(\"users\").\n  Where(\"age\", \"&gt;\", 21).\n  Get(ctx)\n</code></pre>"},{"location":"core-concepts/#multiple-connections","title":"Multiple Connections","text":"<pre><code>pg := querybuilder.Config{\n  Driver:   querybuilder.PostgreSQL,\n  Host:     \"localhost\",\n  Port:     5432,\n  Database: \"analytics_db\",\n  Username: \"postgres\",\n  Password: \"password\",\n}\nquerybuilder.QB().AddConnection(\"analytics\", pg)\n\nmysqlUsers, _ := querybuilder.QB().Table(\"users\").Get(ctx)\npgRows, _    := querybuilder.Connection(\"analytics\").Table(\"events\").Get(ctx)\n</code></pre>"},{"location":"faq/","title":"FAQ","text":"<p>Does it require manual DB initialization? No\u2014config is auto-loaded (env / <code>.env</code>), and you can add named connections.</p> <p>Can I mix DBs? Yes\u2014use <code>AddConnection(\"name\", cfg)</code> + <code>Connection(\"name\").Table(\"...\")</code>.</p> <p>Does it support JSON and full-text queries? Yes\u2014<code>WhereJsonContains</code>, JSON path filters (e.g., <code>metadata-&gt;theme</code>), and <code>WhereFullText</code>.</p> <p>How do I paginate like Laravel? Use <code>Paginate(ctx, page, perPage)</code> and read <code>result.Meta</code> and helpers.</p>"},{"location":"filtering/","title":"Filtering (WHERE)","text":""},{"location":"filtering/#basic-operators","title":"Basic Operators","text":"<pre><code>rows, _ := querybuilder.\n  QB().\n  Table(\"users\").\n  Where(\"status\", \"active\").\n  Where(\"age\", \"&gt;=\", 18).\n  Get(ctx)\n</code></pre>"},{"location":"filtering/#wherein-wherenotnull-orwhere","title":"<code>WhereIn</code>, <code>WhereNotNull</code>, <code>OrWhere</code>","text":"<pre><code>rows, _ := querybuilder.\n  QB().\n  Table(\"users\").\n  WhereIn(\"role\", []any{\"user\", \"admin\", \"moderator\"}).\n  WhereNotNull(\"email\").\n  OrWhere(\"status\", \"premium\").\n  Get(ctx)\n</code></pre>"},{"location":"filtering/#ranges-between","title":"Ranges: <code>between</code>","text":"<pre><code>rows, _ := querybuilder.\n  QB().\n  Table(\"users\").\n  Where(\"age\", \"between\", []any{18, 65}).\n  Get(ctx)\n</code></pre>"},{"location":"filtering/#json-queries","title":"JSON Queries","text":"<pre><code>rows, _ := querybuilder.\n  QB().\n  Table(\"users\").\n  Where(\"metadata-&gt;theme\", \"dark\").\n  WhereJsonContains(\"preferences\", `{\"notifications\": true}`).\n  Get(ctx)\n</code></pre>"},{"location":"filtering/#full-text-search","title":"Full-text Search","text":"<pre><code>posts, _ := querybuilder.\n  QB().\n  Table(\"posts\").\n  WhereFullText([]string{\"title\", \"content\"}, \"golang tutorial\").\n  Where(\"status\", \"published\").\n  Get(ctx)\n</code></pre>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<pre><code>go get github.com/omarhamdy49/go-query-builder\n</code></pre>"},{"location":"getting-started/#configuration","title":"Configuration","text":"<p>The builder reads standard environment variables (or a <code>.env</code> if you load it) to configure the default connection.</p> <pre><code>DB_DRIVER=mysql        # mysql or postgresql\nDB_HOST=localhost\nDB_PORT=3306           # 3306 for MySQL, 5432 for PostgreSQL\nDB_USER=your_username\nDB_PASSWORD=your_password\nDB_NAME=your_database\n\n# Optional\nDB_SSL_MODE=disable\nDB_CHARSET=utf8mb4\nDB_TIMEZONE=UTC\n\n# Pooling\nDB_MAX_OPEN_CONNS=25\nDB_MAX_IDLE_CONNS=5\nDB_MAX_LIFETIME=5m\nDB_MAX_IDLE_TIME=2m\n</code></pre>"},{"location":"getting-started/#first-query","title":"First Query","text":"<pre><code>ctx := context.Background()\n\nusers, err := querybuilder.\n  QB().\n  Table(\"users\").\n  Get(ctx)\nif err != nil { /* handle */ }\n\nusers.Each(func(u map[string]any) bool {\n  fmt.Println(u[\"id\"], u[\"name\"])\n  return true\n})\n</code></pre>"},{"location":"joins/","title":"Joins","text":""},{"location":"joins/#join","title":"<code>Join</code>","text":"<pre><code>rows, _ := querybuilder.\n  QB().\n  Table(\"users\").\n  Select(\"users.name\", \"posts.title\", \"posts.created_at\").\n  Join(\"posts\", \"users.id\", \"posts.author_id\").\n  Where(\"posts.status\", \"published\").\n  OrderBy(\"posts.created_at\", \"desc\").\n  Get(ctx)\n</code></pre>"},{"location":"joins/#leftjoin","title":"<code>LeftJoin</code>","text":"<pre><code>rows, _ := querybuilder.\n  QB().\n  Table(\"users\").\n  Select(\"users.name\", \"posts.title\", \"categories.name AS category\").\n  LeftJoin(\"posts\", \"users.id\", \"posts.author_id\").\n  LeftJoin(\"categories\", \"posts.category_id\", \"categories.id\").\n  Where(\"users.status\", \"active\").\n  Get(ctx)\n</code></pre>"},{"location":"pagination/","title":"Pagination","text":"<p>The paginator returns an object with <code>Data</code> (rows) and <code>Meta</code> (page info), plus helpers.</p> <pre><code>result, err := querybuilder.\n  QB().\n  Table(\"users\").\n  Where(\"status\", \"active\").\n  OrderBy(\"created_at\", \"desc\").\n  Paginate(ctx, 1, 15)\n\nfmt.Println(\"Page:\", result.Meta.CurrentPage, \"of\", result.Meta.LastPage)\nif result.HasMorePages() {\n  if next := result.GetNextPageNumber(); next != nil {\n    fmt.Println(\"Next page:\", *next)\n  }\n}\n</code></pre> <p>Typical JSON shape:</p> <pre><code>{\n  \"data\": [ { \"id\": 1, \"name\": \"John\" }, { \"id\": 2, \"name\": \"Jane\" } ],\n  \"meta\": {\n    \"current_page\": 1, \"next_page\": 2, \"per_page\": 15,\n    \"total\": 150, \"last_page\": 10, \"from\": 1, \"to\": 15\n  }\n}\n</code></pre>"},{"location":"project-structure-testing/","title":"Project Structure &amp; Testing","text":""},{"location":"project-structure-testing/#structure","title":"Structure","text":"<pre><code>pkg/\n  types/        # Interfaces &amp; types\n  database/     # Connection management\n  query/        # Core builder\n  clauses/      # WHERE/JOIN/etc. clause shapes\n  execution/    # Statement execution\n  pagination/   # Paginator\n  security/     # Validations &amp; guards\n  config/       # Env/Config loader\nexamples/       # Usage samples\nquerybuilder.go # Singleton API surface\n</code></pre>"},{"location":"project-structure-testing/#testing","title":"Testing","text":"<pre><code>go test ./...\n</code></pre> <p>Consider adding linters and security scanners in CI:</p> <pre><code>golangci-lint run\ngosec ./...\n</code></pre>"},{"location":"retrieving-results/","title":"Retrieving Results","text":""},{"location":"retrieving-results/#get-first-find","title":"<code>Get</code>, <code>First</code>, <code>Find</code>","text":"<pre><code>users, _ := querybuilder.QB().Table(\"users\").Get(ctx)\nfirst,  _ := querybuilder.QB().Table(\"users\").First(ctx)\none,    _ := querybuilder.QB().Table(\"users\").Find(ctx, 42)\n</code></pre>"},{"location":"retrieving-results/#selecting-columns","title":"Selecting Columns","text":"<pre><code>admins, _ := querybuilder.\n  QB().\n  Table(\"users\").\n  Select(\"id\", \"name\", \"email\").\n  Where(\"role\", \"admin\").\n  Get(ctx)\n</code></pre>"},{"location":"retrieving-results/#ordering-limiting-offsetting","title":"Ordering, Limiting, Offsetting","text":"<pre><code>rows, _ := querybuilder.\n  QB().\n  Table(\"posts\").\n  OrderBy(\"created_at\", \"desc\").\n  Limit(10).\n  Offset(20).\n  Get(ctx)\n</code></pre>"},{"location":"retrieving-results/#result-collections","title":"Result Collections","text":"<pre><code>rows.Each(func(row map[string]any) bool {\n  fmt.Println(row[\"name\"])\n  return true\n})\n\nslice := rows.ToSlice()       // []map[string]any\nnames := rows.Pluck(\"name\")   // []any\nfirst := rows.First()         // map[string]any or nil\nn     := rows.Count()         // int\nempty := rows.IsEmpty()       // bool\n\nactive := rows.Filter(func(r map[string]any) bool {\n  return r[\"status\"] == \"active\"\n})\ndisplay := rows.Map(func(r map[string]any) map[string]any {\n  r[\"display\"] = fmt.Sprintf(\"%s &lt;%s&gt;\", r[\"name\"], r[\"email\"])\n  return r\n})\n</code></pre>"},{"location":"security-performance/","title":"Security &amp; Performance","text":""},{"location":"security-performance/#security","title":"Security","text":"<ul> <li>Prepared statements &amp; bound parameters</li> <li>Input sanitization &amp; validation</li> <li>Optional static analysis in CI (e.g., <code>gosec</code>)</li> </ul>"},{"location":"security-performance/#performance-tips","title":"Performance Tips","text":"<ul> <li>Prefer indexed <code>WHERE</code> columns</li> <li>Use <code>Limit()</code> and explicit <code>Select(...)</code></li> <li>Batch writes with <code>InsertBatch</code></li> <li>Tune connection pooling via env vars</li> </ul>"},{"location":"writing-data/","title":"Writing Data","text":""},{"location":"writing-data/#insert-single","title":"Insert (single)","text":"<pre><code>err := querybuilder.\n  QB().\n  Table(\"users\").\n  Insert(ctx, map[string]any{\n    \"name\":       \"John Doe\",\n    \"email\":      \"john@example.com\",\n    \"age\":        30,\n    \"status\":     \"active\",\n    \"created_at\": time.Now(),\n  })\n</code></pre>"},{"location":"writing-data/#bulk-insert-insertbatch","title":"Bulk Insert (<code>InsertBatch</code>)","text":"<pre><code>batch := []map[string]any{\n  {\"name\": \"Alice\", \"email\": \"alice@test.com\", \"age\": 25},\n  {\"name\": \"Bob\",   \"email\": \"bob@test.com\",   \"age\": 30},\n  {\"name\": \"Carol\", \"email\": \"carol@test.com\", \"age\": 28},\n}\nerr := querybuilder.QB().Table(\"users\").InsertBatch(ctx, batch)\n</code></pre>"},{"location":"writing-data/#update","title":"Update","text":"<pre><code>affected, err := querybuilder.\n  QB().\n  Table(\"users\").\n  Where(\"id\", 1).\n  Update(ctx, map[string]any{\n    \"name\":       \"Updated Name\",\n    \"updated_at\": time.Now(),\n  })\n</code></pre>"},{"location":"writing-data/#delete","title":"Delete","text":"<pre><code>affected, err := querybuilder.\n  QB().\n  Table(\"users\").\n  Where(\"status\", \"banned\").\n  Delete(ctx)\n</code></pre>"}]}