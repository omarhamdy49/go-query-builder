name: CI

permissions:
  contents: read
  security-events: write
  actions: read

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22', '1.23']
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Verify dependencies
      run: go mod verify
      
    - name: Build
      run: go build -v ./pkg/... .
      
    - name: Run tests
      run: go test -race -coverprofile=coverage.out -covermode=atomic ./pkg/... .
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        args: --config=.golangci.yml --timeout=5m
        
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        
    - name: Install Gosec
      run: go install github.com/securego/gosec/v2/cmd/gosec@latest
        
    - name: Run Gosec Security Scanner
      run: gosec -fmt sarif -out gosec.sarif -stdout -verbose=text ./pkg/...
        
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif
      if: always()
        
  validate-examples:
    name: Validate Examples
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        
    - name: Build examples individually
      run: |
        cd examples
        # Build examples from their subdirectories
        for dir in */; do
          if [ -f "$dir/main.go" ]; then
            echo "Building example in $dir..."
            cd "$dir"
            go build -o "/tmp/$(basename "$dir")" . || echo "Failed to build $dir, continuing..."
            cd ..
          fi
        done
        
    - name: Validate example compilation
      run: |
        echo "Examples compiled successfully"
        ls -la /tmp/basic_usage /tmp/pagination_example /tmp/table_direct /tmp/async_performance /tmp/secure_crud_operations 2>/dev/null || echo "Some examples may not have compiled"