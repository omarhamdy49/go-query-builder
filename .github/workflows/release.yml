name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  packages: write

jobs:
  build-test:
    name: Test & Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Run tests
        run: go test -race ./pkg/...

      - name: Build main package
        run: go build -v .

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Resolve version from tag
        id: v
        run: echo "VERSION=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"

      - name: Build release binaries
        run: |
          mkdir -p dist
          
          # Build main library package
          GOOS=linux   GOARCH=amd64 go build -o dist/go-query-builder_linux_amd64       .
          GOOS=darwin  GOARCH=amd64 go build -o dist/go-query-builder_darwin_amd64      .
          GOOS=windows GOARCH=amd64 go build -o dist/go-query-builder_windows_amd64.exe .

      - name: Generate changelog
        run: |
          echo "# Changelog for ${{ steps.v.outputs.VERSION }}" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## What's Changed" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## Features" >> CHANGELOG.md
          echo "- Go Query Builder library" >> CHANGELOG.md
          echo "- Cross-platform binaries (Linux, macOS, Windows)" >> CHANGELOG.md
          echo "- Complete API documentation" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## Git Changes" >> CHANGELOG.md
          # use previous tag..HEAD, fallback for first release
          (git log "$(git describe --tags --abbrev=0 HEAD^)"..HEAD --pretty=format:"- %s" || echo "- Initial release") >> CHANGELOG.md

      - name: Publish release and assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.v.outputs.VERSION }}
          name: Release ${{ steps.v.outputs.VERSION }}
          body_path: CHANGELOG.md
          files: |
            dist/go-query-builder_linux_amd64
            dist/go-query-builder_darwin_amd64
            dist/go-query-builder_windows_amd64.exe
        env:
          GITHUB_TOKEN: ${{ github.token }}

  publish-docs:
    name: Publish Docs (PR to gh-pages)
    runs-on: ubuntu-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write      # to push a branch
      pull-requests: write # to open the PR
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install MkDocs + mike
        run: |
          pip install mkdocs mkdocs-material mike

      - name: Configure git author
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Resolve version from tag (without 'v' prefix)
        id: v
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> "$GITHUB_OUTPUT"

      # Create/update a docs branch that will become the PR head
      - name: Prepare docs branch
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          BR="pages/update-${GITHUB_RUN_ID}"
          # If gh-pages exists, base the branch on it. Otherwise start fresh.
          if git ls-remote --exit-code origin gh-pages >/dev/null 2>&1; then
            git fetch origin gh-pages
            git switch -c "$BR" origin/gh-pages
          else
            git switch --orphan "$BR"
            rm -rf .
            git commit --allow-empty -m "Initialize docs branch"
          fi
          echo "BRANCH=$BR" >> "$GITHUB_OUTPUT"

      # Run mike against the CURRENT branch (no --push)
      - name: Build & version docs with mike (no push)
        run: |
          mike deploy --branch "${{ steps.prep.outputs.BRANCH }}" --update-aliases "${{ steps.v.outputs.VERSION }}" latest
          mike set-default --branch "${{ steps.prep.outputs.BRANCH }}" latest

      # Push the docs branch and open a PR into gh-pages
      - name: Create PR to gh-pages
        uses: peter-evans/create-pull-request@v6
        with:
          branch: ${{ steps.prep.outputs.BRANCH }}
          base: gh-pages
          title: "Docs: publish ${{ steps.v.outputs.VERSION }} (via mike)"
          commit-message: "docs: publish ${{ steps.v.outputs.VERSION }} with mike"
          body: |
            This PR updates GitHub Pages content for version **${{ steps.v.outputs.VERSION }}**.
            - Generated by mike (`latest` alias updated)
            - Created by GitHub Actions due to branch protection on `gh-pages`
          labels: documentation